###################################
# Common flags for all builds
###################################
build --verbose_failures # Print the full command line for commands that failed
build --test_output=errors # Prints log file output to the console on failure

###################################
# iOS flags
###################################
build:ios --apple_platform_type=ios
build:ios --ios_minimum_os=13.0
build:ios --copt=-swift-version --copt=5.0
build:ios --copt=-whole-module-optimization # faster compilation (see https://www.skilled.io/u/swiftsummit/swift-with-a-hundred-engineers)

# For having a more reproducible build, uncomment following lines:
# You need to specify a simulator and version together: if you specify a device without a simulator
# you may experience a python error similar to https://github.com/google/xctestrunner/issues/12 
# build:ios --ios_simulator_device="iPhone 8"
# build:ios --ios_simulator_version="13.4"

###################################
# iOS release build flavour
###################################
build:ios-release --config=ios
build:ios-release --compilation_mode=opt
build:ios-release --apple_bitcode=embedded
build:ios-release --copt=-fembed-bitcode
build:ios-release --apple_generate_dsym
# build:ios-release --ios_multi_cpus=armv7,arm64 # Build the app FAT, so it can be run on devices. This requires a provisioning profile

# build:ios-release --linkopt=-s --strip=always # Omit all symbol information from the output file
# build:ios-release --copt=-O2

###################################
# iOS debug build flavour
###################################
build:ios-debug --config=ios
build:ios-debug --compilation_mode=dbg
build:ios-debug --copt=-enable-testing # Make libraries testable

# build:ios-debug --linkopt=-all_load
# build:ios-debug --copt=-DDEBUG # Enable the DEBUG flag, for using it in macros
# build:ios-debug --copt=-Onone # Do not make optimizations: compilation is faster
# build:ios-debug --copt=-g # Generate debug information

###################################
# Commented out, but maybe good to have around
###################################
# Specify xcode version
# build:ios --xcode_version=11.3.1

# During development
# build -s --test_output=all --cache_test_results=no

# Force bazel output to use colors (good for jenkins) and print useful errors
# This is disabled as messes up with the errors and warnings shown by xcode:
# they contain color characters, and when clicked do not take you to the offending line
# common --color=yes

# Swift-specific features: https://github.com/bazelbuild/rules_swift/blob/master/swift/internal/features.bzl
# build --features=swift.enable_batch_mode  # Intended to speed up non-incremental non-WMO builds.
# build --features=swift.use_global_module_cache  # Use the same global Clang module as ObjC targets.

###################################
# References
###################################
# * https://github.com/tensorflow/tensorflow/blob/master/tensorflow/tools/ci_build/install/.bazelrc
# * https://github.com/material-components/material-components-ios/blob/develop/.bazelrc
# * https://github.com/lyft/envoy-mobile/blob/master/.bazelrc
